snippet h "header" b
  #!/usr/bin/env python3
  """${1}
    Author:  Jose Lima (`getenv('USER')`)
    Date:    `strftime("%Y-%m-%d  %H:%M")`
    ${2:${VISUAL}}
  """
  ${0}

snippet dl "debug" b
  import pdb;pdb.set_trace()

snippet st "debug" b
  import pdb;pdb.set_trace()

snippet rst "remote debug" b
  import rpdb;rpdb.set_trace()

snippet doc "docstring" b
  """${0}"""

snippet filter "ansible filter" b
  def ${1}(${2}):
    ${0}
    return


  class FilterModule:
    def filters(self):
      return {"${1}": ${1}}

snippet logging "logger for python"
  import logging

  ${1}_logger = logging.getLogger(__name__)

  ${1}_handler = logging.StreamHandler()
  ${1}_logger.addHandler(${1}_handler)

  def SetDebug(debugLevel=None):
      ${1}_logger.setLevel(logging.DEBUG if debugLevel == 2 else logging.INFO)
      ${1}_formatter = logging.Formatter('%(asctime)s %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s')

      # Set the formatter on the handler
      ${1}_handler.setFormatter(${1}_formatter)

  SetDebug(2)
  ${0}

snippet apilog "logger for api"
  import logging
  from requests.cookies import cookielib

  ${1}_logger = logging.getLogger(__name__)

  ${1}_formatter = logging.Formatter(
      "%(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s"
  )
  ${1}_handler = logging.StreamHandler()
  ${1}_handler.setFormatter(${1}_formatter)

  # set debug level
  _debuglevel = 2

  # get other module loggers
  urllib3_logger = logging.getLogger("requests.packages.urllib3")
  urllib3_retry_logger = logging.getLogger("urllib3.util.retry")
  cookie_logger = logging.getLogger("http.cookiejar")


  # remove existing handlers
  ${1}_logger.handlers = []
  urllib3_logger.handlers = []
  urllib3_retry_logger.handlers = []
  cookie_logger.handlers = []

  if _debuglevel == 2:
      # TODO(jlima): this can problably be removed
      cookie_logger.addHandler(${1}_handler)
      cookie_logger.setLevel(logging.DEBUG)
      # cookielib.debug = False
      ${1}_logger.addHandler(${1}_handler)
      ${1}_logger.setLevel(logging.DEBUG)

  ${1}_logger.debug("TEST MSG")

  """
  other examples

  if not sensitive:
      try:
          api_logger.debug('RESPONSE HEADERS: %s\n', json.dumps(
              json.loads(text_type(response.headers)), indent=4))
      except ValueError:
          api_logger.debug('RESPONSE HEADERS: %s\n', text_type(response.headers))
      try:
          api_logger.debug('RESPONSE: %s\n', json.dumps(response.json(), indent=4))
      except ValueError:
          api_logger.debug('RESPONSE: %s\n', text_type(response.text))
  else:
      api_logger.debug('RESPONSE NOT LOGGED (sensitive content)')

  api_logger.debug("Error, non-200 response received: %s", response.status_code)
  """
