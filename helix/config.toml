# https://docs.helix-editor.com/configuration.html
theme = "mycatppuccin_mocha"

[editor]
true-color = true
mouse = false
line-number = "relative"
bufferline = "multiple"
shell = ["zsh", "-c"]
scrolloff = 10
color-modes = true
completion-trigger-len = 1

[editor.soft-wrap]
enable = true

# lsp.display-inlay-hints = false

[editor.file-picker]
hidden = false # do not ignore hidden files
ignore = true # this is the default, but we can add files to a .ignore file that is not .gitignore

[editor.cursor-shape]
insert = "bar"

# [editor.statusline]
# left = [ "mode", "spinner" ]
# center = [ "file-name" ]
# right = [ "file-encoding", "file-line-ending", "file-type"]
# mode.normal = "N "
# mode.insert = "I "
# mode.select = "S "

[editor.statusline]
left = ["mode", "spacer","file-name", "spacer", "file-modification-indicator", "diagnostics", "workspace-diagnostics", "spinner"]
center = [ "version-control" ]
right = ["spacer","file-type", "position", "total-line-numbers", "position-percentage", "spacer"]
mode.normal = "N"
mode.insert = "I"
mode.select = "S"

[editor.lsp]
snippets = true
display-messages = true

# [editor.whitespace.render]
# space = "none"
# tab = "none"
# newline = "none"

[editor.indent-guides]
render = true
characters = "▏"
skip-levels = 1

[keys.normal]
G = "goto_file_end"
X = "extend_line_above"
K = "hover"
ret = ["move_line_down", "goto_line_start"]
esc = ["collapse_selection", "keep_primary_selection"]
C-n = ":buffer-previous"
C-e = ":buffer-next"
g = { a = "code_action" }


# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
# esc = ["collapse_selection", "keep_primary_selection", "normal_mode"]

# # colemak
# h = "move_char_left"
# e = "move_line_up"
# n = "move_line_down"
# i = "move_char_right"
# t = "insert_mode"
# T = "insert_at_line_start"
# D = "kill_to_line_end"     

# Maps `ga` to show possible code actions

C-r = ":config-reload"

o = ["open_below", "insert_mode"]
O = ["open_above", "insert_mode"]

"{" = ["goto_prev_paragraph", "collapse_selection"]
"}" = ["goto_next_paragraph", "collapse_selection"]
# C-] = ["goto_definition"]

0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
"%" = "match_brackets"

V = ["select_mode", "extend_to_line_bounds"]

# C = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection", "insert_mode"]
# D = ["extend_to_line_end", "yank_main_selection_to_clipboard", "delete_selection"]
S = "surround_add" # Would be nice to be able to do something after this but it isn't chainable

# Clipboards over registers
x = "delete_selection"
p = ["paste_clipboard_after", "collapse_selection"]
P = ["paste_clipboard_before", "collapse_selection"]
# Would be nice to add ya and yi, but the surround commands can't be chained
Y = ["extend_to_line_end", "yank_main_selection_to_clipboard", "collapse_selection"]

# If you want to keep the selection-while-moving behaviour of Helix, this two lines will help a lot,
# especially if you find having text remain selected while you have switched to insert or append mode
#
# There is no real difference if you have overridden the commands bound to 'w', 'e' and 'b' like above
# But if you really want to get familiar with the Helix way of selecting-while-moving, comment the
# bindings for 'w', 'e', and 'b' out and leave the bindings for 'i' and 'a' active below. A world of difference!i = ["insert_mode", "collapse_selection"]

i = ["insert_mode", "collapse_selection"]
a = ["append_mode", "collapse_selection"]

# Undoing the 'd' + motion commands restores the selection which is annoying
u = ["undo", "collapse_selection"]

# search for word under the cursor
"*" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_next"]
"#" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_prev"]

# Make j and k behave as they do Vim when soft-wrap is enabled
# i = "move_line_down"
# e = "move_line_up"

[keys.normal."+"]
m = ":run-shell-command make"
t = ":run-shell-command make test"

[keys.normal.","]
w = ":write!"
q = ":quit-all!"
d = ":buffer-close!"

# [keys.normal.g]
# q = ":reflow"
# a = "code_action"


[keys.normal.space]
l = ":toggle lsp.display-inlay-hints"

[keys.normal.backspace]
b = ":run-shell-command zellij run -f -- make build"
r = ":run-shell-command zellij run -f -- make run"
t = ":run-shell-command zellij run -f -- make test"
g = ":run-shell-command zellij run -fc -- lazygit"
f = ":run-shell-command zellij run -fc -- broot"

[keys.insert]

[keys.select]
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]

# interferes with multi cursors
# C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
"%" = "match_brackets"
S = "surround_add" # Basically 99% of what I use vim-surround for
u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]

# Visual-mode specific muscle memory

# colemak
# t = "select_textobject_inner"
i = "select_textobject_inner"
a = "select_textobject_around"

# Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
tab = ["insert_mode", "collapse_selection"] # tab is read by most terminal editors as "C-i"
C-a = ["append_mode", "collapse_selection"]

# Make selecting lines in visual mode behave sensibly
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

# Clipboards over registers ye ye
d = ["yank_main_selection_to_clipboard", "delete_selection"]
x = ["yank_main_selection_to_clipboard", "delete_selection"]
y = ["yank_main_selection_to_clipboard", "normal_mode", "flip_selections", "collapse_selection"]
Y = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "goto_line_start", "collapse_selection", "normal_mode"]
p = "replace_selections_with_clipboard" # No life without this
P = "paste_clipboard_before"

