# vim-best-tips

To reindent many files, the argument list can be used:

:args *.c
:argdo normal gg=G
:wall

Or use the buffer list (caution, every buffer will be affected):

:bufdo normal gg=G
:wall
03-16-2018 15:06

increment numbers visual-block

1
1
1
1

block select starting on second line, type g c-a

1
2
3
4

" increment letters too
set nrformats+=alpha

use ctr-o to go to last known files, use multiple times to cycle through them

use ctr-i to go the other direction (ctr-o *out, ctr-i *in)

# gf -> goto file under ursor

use marks....

* mm ( set mark m )

use motions to delete, select, yank with your mark
or jump to other areas of the file with searches etc

d'm ( detele to mark m )
y'm ( yank to mark m )
v'm ( visual select to mark m )

## best tips http://vim.wikia.com/wiki/Best_Vim_Tips?action=edit
~~~
{{TipImported
|id=305
|previous=303
|next=306
|created=2002
|complexity=intermediate
|author=zzapper
|version=7.0
|rating=5111/1537
|category1=Usage
|category2=
}}
Here is a necessarily cryptic list of the Best Vim Tips. There is an [http://www.rayninfo.co.uk/vimtips.html updated version] and a [http://vim.wikia.com/wiki/Best_Vim_Tips?printable=yes printer friendly version].

===Basic use===

<pre>
<Esc> is the escape key or use <ctrl>[  sometimes written as  <C-[>

vimtutor    : starts vim editing a copy of a tutorial file -- very good.
i           : insert mode. Next keys typed are inserted into the file.
<Esc>       : Escape from insert mode so you can navigate and use edit commands (stop selecting)
h j k l     : move cursor ( h: ←  j: ↓  k: ↑  l: → )
A           : Append at end of line
o           : Insert at new line below
u           : undo last command, again and again
x           : delete character under cursor
dw          : delete everything right from the cursor to the start of next word (and put it into the default register)
dd          : delete line (and put it into the default register)
p           : paste the default register

/myname     : search forward for myname

:wq         : write and quit
:x          : write and quit
:w filename : write a copy of the file you are editing as filename
:q!         : quit without saving even if changes were made!
:help       : display help
<Tab>       : use tab completion to scroll through commands that start with what you typed
</pre>

===Still basic===

<pre>
COPY PASTE  (for CUTting lines use dd as described above)
v           : visual mode -- use to select text with cursor movement or mouse
y           : use to yank (copy) what was selected
<Esc>       : esc gets you back to the main mode

^ w e $     : bigger movements: beginning of line, word, end of word, end of line

Modes:
 normal, insert and visual, there are others too
 <Esc>    takes you back to normal

Enter a number before a command to repeat it, examples:
   10w      : skip forward 10 words
   10dd     : delete 10 lines

Commands are case sensitive:
   c        : starts a change command
   C        : change to end of line (same as c$)
   ce       : change to end of word (a complete change command)
</pre>

===Really useful===

<pre>
www.vim.org   : Visit frequently
comp.editors  : Vim dominated newsgroup
* # g* g#     : find word under cursor (forwards/backwards)
%             : match brackets {}[]()
matchit.vim   : % now matches tags <tr><td><script> etc
<C-N> <C-P>   : word completion in insert mode
<C-X><C-L>    : Line complete SUPER USEFUL
/<C-R><C-W>   : Pull <cword> onto search/command line
:set ignorecase : you nearly always want this
:set smartcase  : case-sensitive if search contains an uppercase character
:syntax on    : colour syntax in Perl,HTML,PHP etc
:h slash<C-D> : type control-D and get a list all help topics containing slash
    (plus use TAB for Help completion)
</pre>

===Make it easy to update/reload [[vimrc]]===

<pre>
" source $MYVIMRC reloads the saved $MYVIMRC
:nmap <Leader>s :source $MYVIMRC

" opens $MYVIMRC for editing, or use :tabedit $MYVIMRC
:nmap <Leader>v :e $MYVIMRC

" <Leader> is \ by default, so those commands can be invoked by doing \v and \s
</pre>

===Visual mode mappings===

<pre>
:vmap sb "zdi<b><C-R>z</b><Esc> : wrap <b></b> around visually selected text
:vmap st "zdi<?= <C-R>z ?><Esc> : wrap <?= ?> around visually selected text
</pre>

===Exploring===

<pre>
:Ex     : file explorer note capital Ex
\be     : show buffer explorer (requires plugin)
:ls     : list of buffers(eg following)
:cd ..  : move to parent directory
</pre>

===Great===

<pre>
guu     : lowercase line
gUU     : uppercase line
~       : invert case (upper->lower; lower->upper) of current character
gf      : open file name under cursor (SUPER)
ga      : display hex, ascii value of character under cursor
g8      : display hex value of utf-8 character under cursor
ggg?G   : rot13 whole file
xp      : swap next two characters around
CTRL-A,CTRL-X : increment, decrement next number on same line as the cursor
CTRL-R=5*5    : insert 25 into text
=             : (re)indent the text on the current line or on the area selected (SUPER)
=%            : (re)indent the current braces { ... }
G=gg          : auto (re)indent entire document
</pre>
If you use Ctrl-V for paste, you will probably need to [[VimTip30|unmap CTRL-A]] first.

===Easter eggs===

*{{help|42}}
*{{help|holy-grail}}
*<nowiki>:</nowiki>help!
*{{help|map-modes}} (see comment below the table about :nunmap)
*{{help|UserGettingBored}}
*{{help|spoon}}
*{{help|showmatch}} (read the note)
*<code>:Ni!</code>
*{{help|bar}}

===Markers and moving about===

<pre>
'.       : jump to last modification line (SUPER)
`.       : jump to exact spot in last modification line
<C-O>    : retrace your movements in file (backward)
<C-I>    : retrace your movements in file (forward)
:ju(mps) : list of your movements {{help|jump-motions}}
:history : list of all your commands
</pre>

===Abbreviations and maps===

<pre>
:map <F7>  :'a,'bw file            " Write the lines from mark a to mark b to 'file'
:map <F8>  :.w file<CR>            " Write the current line to 'file'
:map <F9>  :r file                 " Read text from 'file' and insert it below the current line
:map <F10> :w<CR>:!php %<CR>       " Write the file and run it through php
:ab php                            " list abbreviations beginning with php
:map \                             " list maps beginning with \
</pre>

===For use in maps===

<pre>
<CR>     : carriage Return for maps
<Esc>    : Escape
<Leader> : normally \  change with :let mapleader = ","
<Bar>    : | pipe
</pre>

===List registers===

<pre>
:reg     : display contents of all registers
"1p      : paste from register 1
</pre>

===Execute command from buffer contents===

<pre>
"ayy@a   : execute the Vim command in the current line
yy@"     : same
</pre>

===Get output from shell commands===

These use external programs – <code>ls, grep, date, sort, &hellip;</code> (see {{help|:sort}} to learn how to use Vim's built-in sort).
<pre>
:r!ls                 : reads in output of ls (use dir on Windows)
:r !grep "^ebay" file.txt  : read output of grep
:20,25 !rot13        : rot13 lines 20 to 25
:r!date              : insert date (use  date /T on Windows)
:.!sh                : execute contents of current line in buffer and capture the output

 Sorting with external sort
:%!sort -u           : contents of the current file is sorted and only unique lines are kept
:'v,'w!sort          : sort from line marked v thru lines marked w
:g/^$/;,/^$/-1!sort  : sort each block (note the crucial ;)

!1} sort             : sorts paragraph; this is issued from normal mode!)

 Entering !! in normal mode is translated to  :.!
 Appending a command sends the current line to the command replacing it with command's result
!!date              : Replace current line with date
!!which command     : Replace current line with the absolute path to command
!!tr -d AEIO        : translate current line deleting As, Es, Is, and Os from the current line

 You can also use ! on a visual selection. Select an area with one of the visualmode
 commands, and then type !command to pipe the whole selection through command.
This is equivalent to :'<,'>!command.
For example, after selecting multiple lines with visualmode:
!sort              : sort selected lines
!grep word         : keep only lines containing 'word' in the selected range.
</pre>

===Multiple files===

<pre>
:wn           : write file and move to next (SUPER)
:bd           : remove file from buffer list (SUPER)
:sav php.html : Save current file as php.html and "move" to php.html
:sp fred.txt  : open fred.txt into a split
:e!           : return to unmodified file
:w /some/path/%:r   : save file in another directory, but with the same name
:e #          : edit alternative file
:args         : display argument list
:n            : next file in argument list
:prev         : previous file in argument list
:rew          : rewind to first file in argument list
:ls           : display buffer list
:bn           : next buffer
:bp           : previous buffer
:brew         : rewind to first buffer in buffer list
:tabe         : open new tab page (Ctrl-PgUp, Ctrl-PgDown for next/previous tab)
:tabm n       : move tab to position n (0=leftmost position)
</pre>

===Recording===

<pre>
qa            : record keystrokes to register a
your commands
q             : quit recording
@a            : execute commands again
@@            : repeat
# editing a register/recording
"ap
<you can now see register contents, edit as required>
"add
@a
:%normal @a #execute the macro recorded in register a on all lines of the current file.
#or, with a visually selected set of lines:
:normal @a
</pre>

===vimrc essentials===


<pre>
:set incsearch : jumps to search word as you type (annoying but excellent)
:set wildignore=*.o,*.obj,*.bak,*.exe
:syntax on : display syntactical elements by color based on filetype ( extension )
</pre>

===Launching programs under Windows===


There are a number of options to run applications on the Windows platform.

This causes Windows to launch the program associated with the file extension. It also restores the paste buffer to its original value:
<pre>
" This command will execute the file, for example, if this is an
" HTML file, it will run:
"     start c:\absolute\filename.html
nnoremap <silent> <C-F6> :let old_reg=@"<CR>:let @"=substitute(expand("%:p"), "/", "\\", "g")<CR>:silent!!cmd /cstart <C-R><C-R>"<CR><CR>:let @"=old_reg<CR>
</pre>

You can also use Windows rundll32.exe for some options:
<pre>
" vmap <silent> <C-F5> :<C-U>let old_reg=@"<CR>gvy:silent!!start rundll32.exe url.dll,FileProtocolHandler <C-R><C-R>"<CR><CR>:let @"=old_reg<CR>
</pre>

Or, for example, you can launch Internet Explorer directly:
<pre>
:nmap <Leader>f :update<CR>:silent !start c:\progra~1\intern~1\iexplore.exe file://%:p<CR>
:nmap <Leader>i :update<CR>:!start c:\progra~1\intern~1\iexplore.exe <cWORD><CR>
</pre>

===FTP from Vim===

<pre>
cmap <Leader>r :Nread ftp://209.51.134.122/public_html/index.html
cmap <Leader>w :Nwrite ftp://209.51.134.122/public_html/index.html
gvim ftp://209.51.134.122/public_html/index.html
: For ascii file transfers add the following line to your .vimrc
let g:netrw_ftpmode="ascii"
</pre>

===Appending to registers===

<pre>
# yank 5 lines into "a" then add a further 5
"a5yy
10j
"A5yy
[I : show lines matching word under cursor <cword>
</pre>

===Conventional shifting===

<pre>
:'a,'b>>
# visual shifting (builtin-repeat)
:vnoremap < <gv
:vnoremap > >gv
</pre>

===Searching===

<pre>
/^fred.*joe.*bill  : line beginning with fred, followed by joe then bill
/^[A-J]            : line beginning A-J
/^[A-J][a-z]\+\s   : line beginning A-J then one or more lowercase characters then space or tab
/fred\_.\{-}joe    : fred then anything then joe (over multiple lines)
/fred\_s\{-}joe    : fred then any whitespace (including newlines) then joe
/fred\|joe         : fred OR joe
</pre>

===Substitution===

<pre>
:%s/fred/joe/igc           : general substitute command
:%s/\r//g                  : delete DOS Carriage Returns (^M)
:'a,'bg/fred/s/dick/joe/gc : VERY USEFUL
:s/\(.*\):\(.*\)/\2 : \1/  : reverse fields separated by :
# non-greedy matching \{-}
:%s/^.\{-}pdf/new.pdf/     : to first pdf)
:s/fred/<c-r>a/g           : substitute "fred" with contents of register "a"
:%s/^\(.*\)\n\1/\1$/       : delete duplicate lines
:help /\{-}
# multiple commands
:%s/\f\+\.gif\>/\r&\r/g | v/\.gif$/d | %s/gif/jpg/
:%s/suck\|buck/loopy/gc       : ORing
:s/__date__/\=strftime("%c")/ : insert datestring

</pre>

*Replace FIX delimiter for a 'caret':
'01' is the hex for the FIX protocol delimiter. You can move your cursor over a character and press 'ga' to see a character's hex value.
 :%s/\%x01/^/g

===Global command===

<pre>
:g/one\|two/     : list lines containing "one" or "two"
:g/^\s*$/d       : delete all blank lines
:g/green/d       : delete all lines containing "green"
:v/green/d       : delete all lines not containing "green"
:g/one/,/two/d   : not line based
:v/./.,/./-1join : compress empty lines
</pre>

Between lines with marks <code>a</code> and <code>b</code> (inclusive), append each line starting with "Error" to a file:
<pre>
:'a,'b g/^Error/ .w >> errors.txt
</pre>

Delete all lines containing "green" but not "red" or "pink". Command <code>:g/^/</code> matches every line; the current line is copied into variable <code>x</code>; if any part of <code>x</code> matches (case sensitive) "green" and not "red" and not "pink", the line is deleted. Replace <code>#</code> with <code>?</code> for case insensitive.
<pre>
:g/^/let x=getline('.') | if x=~#'green' && x!~#'red' && x!~#'pink' | d | endif
</pre>

===Paste register *===

<pre>
:redir @* : redirect commands to paste
:redir END
"*yy      : yank to paste
"*p       : insert paste buffer
</pre>

===Formatting text===

<pre>
gq<CR>
gqap (a is motion p paragraph (visual mode))
</pre>

===Operate command over multiple files===

<pre>
:argdo %s/foo/bar/
:bufdo %s/foo/bar/
:windo %s/foo/bar/
:tabdo %s/foo/bar/
</pre>

===Command line tricks===

<pre>
gvim -h
ls | gvim -   : edit a PIPE!
# vg.ksh (shell script)
# vi all files in directory containing keyword $1 and jump to $1
gvim.exe -c "/$1" $(grep -isl "$1" *) &
</pre>

===Preview in web browser===

<pre>
#add this to your .vimrc:
command Preview :!firefox %<CR>
#if you are using windows, you will need to adjust your PATH to include the path to your browser.
</pre>

==Comments==
The Buffer Explorer scripts mentioned above (<code>\be</code> <code>\bs</code>) rely on the popular script {{script|id=42|text=bufexplorer.vim}}.

Have recently started to appreciate taglist.vim (the most popular Vim script) it really comes into it's own with very long programs containting lots of subroutines/functions as it shows which function/sub you're in etc {{script|id=273}}.

===Vim traps===

In regular expressions you must backslash <code>+</code> (match 1 or more).
<pre>
/fred\+/ : matches fred/freddy but not free
</pre>

<code>\v</code> (very magic) reduces backslashing
<pre>
/codes\(\n\|\s\)*where : normal regexp
/\vcodes(\n|\s)*where  : very magic
</pre>

===More tips===

Pulling objects onto command/search line (SUPER)
<pre>
CTRL-R CTRL-W   : pull word under the cursor into a command line or search
CTRL-R CTRL-A   : pull whole word including punctuation
CTRL-R -        : pull small register
CTRL-R [0-9a-z] : pull named registers
CTRL-R %        : pull file name (also #)
</pre>

Manipulating registers
<pre>
map <F11> "qyy:let @q=@q."zzz"
</pre>

Options
<pre>
:verbose set history : show value of history, and where set
</pre>

Run file through an external program (eg php)
<pre>
map <F9> :w<CR>:!php %<CR>
</pre>

Inserting Carriage Returns (TODO replace with \r)
<pre>
:%s/nubian/<C-V><C-M>&/g : that's what you type
:%s/nubian/<C-Q><C-M>&/g : for Win32
:%s/nubian/^M&/g         : what you'll see where ^M is ONE character
</pre>

TODO move following to other CTRL-R tips
<pre>
Retrieving last command line command for copy & pasting into text
<c-r>:
Retrieving last Search Command for copy & pasting into text
<c-r>/
</pre>

Searching over multiple lines: <code>\_</code> includes newline
<pre>
/<!--\_p\{-}-->    : search for multiple line comments
/fred\_s*joe/i     : any whitespace including newline
/bugs\_.*bunny : bugs followed by bunny anywhere in file
:h \_              : help
</pre>

More completions
<pre>
<C-X><C-F> :insert name of a file in current directory
</pre>

Help for help
<pre>
:h visual<C-D><Tab> : obtain list of all visual help topics
                    : Then use tab to step through them
:h ctrl<C-D> : list help of all control keys
:h :r        : help for :ex command
:h CTRL-R    : normal mode
:h \r        : what's \r in a regexp
:h i_CTRL-R  : help for say <C-R> in insert mode
:h c_CTRL-R  : help for say <C-R> in command mode
:h v_CTRL-V  : visual mode
:h 'ai       : help on setting option 'autoindent'
</pre>

====To number the lines in the file====

Try one of these
<pre>
:%! nl -ba
:%!cat -n
</pre>

To simply display how many lines are in the current buffer, type Ctrl-g (or <code>g</code> then Ctrl-g for more information).

====If you want to delete multiple adjacent duplicate lines====

<pre>
:%s/^\(.*\)\n\(\1\n\)*/\1\r/
</pre>

===More, unformatted tips===

TODO Might delete some of these if covered in other tips.

----
Instead of this:
<pre>
:map <F12> :set number!<CR>
</pre>

try this:
<pre>
map <F12> :set number!<Bar>set number?<CR>
</pre>

and possibly these:
<pre>
map <F11> :set hls!<Bar>set hls?<CR>
map <F10> :set paste!<Bar>set paste?<CR>
map <F9>  :set wrap!<Bar>set wrap?<CR>
</pre>

to easily change (and display) the current state.

----
If you do not want to remove Windows key mappings, keep the line
<pre>
noremap <C-kPlus> <C-A>
</pre>

in your vimrc. Then you can use Ctrl-NumPad+ to increment numbers as others do with Ctrl-A.

----
Another very useful mapping:
<pre>
noremap <C-J> gj
noremap <C-K> gk
</pre>

That's really useful when dealing with long lines. It lets you use Control-J and Control-K to move up and down screen lines instead of buffer lines with j and k. Control-J isn't really mapped to anything by default, it's like hitting enter, but Control-K is something to do with digraphs. However, noremap won't remove this ability in insert mode.

Alternatively, you could use:
<pre>
noremap <Up> gk
noremap <Down> gj
</pre>

which would map the arrow keys to screen line movement instead of buffer line movement.

----
To substitute any word (say FILE) by actual filename you can use
<pre>
:%s/FILE/\=expand("%:t")
</pre>

----
The mappings to wrap visual selections in text clobbers a buffer. I use:
<pre>
vmap s( <Esc>`>a)<Esc>`<i(<Esc> : wrap a visual selection in ()
</pre>

----
==Comments==
What was the point of changing <code><Esc></code> into <code><esc></code> and <code><Tab></code> into <code><tab></code>? The capitalized form is what's used in Vim's help, and it's what should be used here. ([[User:Spiiph|Spiiph]] 03:34, December 6, 2009 (UTC))
:unfixed it. sorry. (perhaps this would have been better been placed in the discussion
::Thanks for working on the tip. I might join in later. We put comments in plain view in the "Comments" section (so I removed the html comment) and we avoid the talk page (see the [[Vim Tips Wiki:Discussion guidelines|discussion guidelines]] for a little more). In due course we will delete these temporary comments, and what is on the talk page.
::It's hard to know what to do with this tip. I think it should pretty well all be kept, but we should resist the temptation to expand it much (some better explanations are good). I'll think about how we might provide links to tips that expand some points, for example [[Tutorial]]. [[User:JohnBeckett|JohnBeckett]] 04:25, December 6, 2009 (UTC)

----
Commands are case sensitive:
   c        : starts a change command
   C        : change to end of line (same as c$)
   ce       : change to end of word (a complete change command)
Does ce belong as an example of case sensitive command?
Would  better additional entry be
   a        : append after cursor
   A        : Append at end of line

[[User:DG12|DG12]] 13:48, December 6, 2009 (UTC)

----
Help for help

Is it me or does this section have a mix of syntax for control characters?
[[User:DG12|DG12]] 13:51, December 6, 2009 (UTC)
----
My thoughts on comments by DG12 above and on my talk:
*By "all be kept" above, I mean that the content is probably all good and should not be removed (although there's a lot of it, and when I take some time to look through it again I might change my mind).
*Re the format of the tip: The current plain text with just a ':' separating command and text is a bit confusing in places, but the simplicity rather suits Vim. I have used cleartable in a couple of tips, and I might try it here. See [[VimTip605]] for an example. Wikitable is also available, but it's rather overwhelming; see [[VimTip1611]] for an example.
*Re the style of the tip: The quirky comments are often not directly helpful but they worked well for me when I first read this tip (at vim.org) several years ago. For example "<code>:set ignorecase : you nearly always want this</code>" alerts readers that they should find out what the command means and consider using it. If every point were clarified, the tip would be far too long and hard to read. Currently the tip is useful because it provides a subjective overview of what people should look for in Vim.
*Re the case sensitive point above: While a/A is a good example, it's not needed as an additional example. I think the <code>ce</code> is to show a complete change command. It might be a good idea to replace the c/C/ce with a/A which makes the point. Actually, even better might be j/J because the two actions are totally different.
*The "Help for help" section is perhaps confusing, but it is exactly correct because it shows what a person should type. Like many of the items, it could be improved while resisting the tempation to add too many words.
Finally thanks for drawing attention to this page because the tip does need cleaning, and discussion and work will help. [[User:JohnBeckett|JohnBeckett]] 01:03, December 7, 2009 (UTC)
----
*re Help for help: I was refering to:
<pre>
:h ctrl<C-D> : list help of all control keys
:h CTRL-R    : normal mode
</pre>
or maybe I am confused? (Be nice!)

I also think some people know the info so well what is unclear to someone reading the tip may not seem awkward at all.

*re case sensitive example: I choose a/A because many (well some) of the uppercase form of the command are like BIG versions of the lowercase version w/W b/B h/H i/I ...

*re "quirky" comments: may mean something to look into but without a link its not much help.

*Then there is the length of this document which makes scrolling difficult!
[[User:DG12|DG12]] 01:58, December 7, 2009 (UTC)

:It is impossible to learn everything about Vim in a short period. This tip is definitely quirky and subjective, however, many people (long before this wiki was created) have found the tip to be very helpful as a source of ideas rather than as a detailed manual. Perhaps the lead should make that clear, although it will be clear after reading for a minute or two. Yes, we should add links. The "help for help" should link to [[VimTip882]] although that tip needs to be fixed! When I first read this page, I did not understand it either, but I referred to it many times while learning Vim.
:The "help for help" stuff is correct, although unclear. The ":h ctrl<C-D>" item is saying to type <code>:h ctrl</code> then press Ctrl-D. The ":h CTRL-R" item is saying that the page of help will show you what Ctrl-R does in normal mode, whereas ":h i_CTRL-R" shows what Ctrl-R does in insert mode, etc. That should be explained at 882. [[User:JohnBeckett|JohnBeckett]] 04:18, December 7, 2009 (UTC)

~~~


# sort blocks of text

  It's relatively simple (and, I believe, close to what Jason had in mind) :

  turn all your functions into one liners by replacing all newlines with some fancy character:
  :g/def/,/end/s/\n/§
  sort those one liners with:
  :%sort
  expand all your functions back to their initial individual state:
  :g/def/s/§/\r
